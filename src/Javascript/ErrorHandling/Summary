
Error Handling:

Error handling in Js involves dealing with runtime errors and exceptions that may occur during the execution of your code


There are several techniques and mechanisms available to handle errors effectively.

.try-catch statement
.throw statement
.finally Block
.Error Objects

try-catch | Statement
=====================

The try block contains the code that may throw an exception, and the catch block is where you can handle the exception.

try {
    //code that may throw an exception
} catch (error) {
    // Handling the exception
}

//throw | Statement
====================

The throw statement is used to manually throw a customer error.

It allows you to create and throw you own errors, which can be caught and handled using try-catch

function divide(a, b) {
    if (b === 0) {
        throw new Error("Division by zero is not allowed.");
    }
    return a / b;
}

try {
    let result = divide(10, 0);
    console.log(result);
} catch (error) {
    console.log("An error occurred:", error.message)
}

finally | Statement
-------------------

The finally block is an optional block that follows the try-catch block. The code within the finally block executes regardless of whether an exception occurred or not.

It is commonly used to perform cleanup tasks or release resources.

try {
    // code that may throw an exception
} catch (error) {
    //Handling the exception
} finally {
    // Code that always executes
}