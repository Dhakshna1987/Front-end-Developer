Promise:
======= 

3 states: Pending, Fulfilled, Rejected


const myPromise = new Promise((resolve, reject) => {
    const error = false;
    if(!error){
        resolve("Yes!, resolved the promise");
    }else {
        reject('No!, rejected the promise');
    }
});

const myNextPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("My next process resolved");
    },3000)
});

myPromise
.then(value => {
    return value + "Welcome"
})
.then(newValue => console.log(newValue))
.catch(error) {
    console.log(error); //'No!, rejected the promise"
}

myNextPromies
.then(value => {
    console.log(value);
})
.catch(error) {
    console.log(error);
}


---------------------------------------------------------------

const user = fetch("https://jsonplaceholder.typicode.com/users")
            .then(response = > {
              return response.json()
            })
            .then(value => {
                valule.forEach(element => {
                    console.log(element)
                });
            });

console.log(user);
---------------------------------------------
async await
-----------

const user = async() => {
    const fetchApiData = await fetch("https://jsonplaceholder.typicode.com/users");
    const userData = await fetchApiData.json();
    console.log(userData);
    return userData;
}

user();

