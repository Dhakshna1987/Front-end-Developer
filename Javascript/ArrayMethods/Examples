
Array Methods in Javascript
===========================

.push(): Adds elements to the end of an Array
Ex: let arr = [1,2]; arr.push(3); //[1,2,3]
.pop(): Removes the last element from an arra.
Ex: let arr=[1,2,3]; arr.pop(); // [1,2]
.shift(): Removes the first element from an array
Ex: let arr = [1,2,3]; arr.shift(); //[2,3]
.unshift(): Adds elements to the begining of an array
Ex: let arr = [1,2,3]; arr.unshift(4); //[1,2,3,4]
.splice(): Add/Removes elements from an array
Ex: let arr = [1,2,3]; arr.splice(1,1); // [1]
.slice(): returns a portion of an array.
Ex: let arr = [1,2,3]; arr.slice(1); // [2,3]
.concat():Merges two or more arrays.
Ex: let arr = [1,2,3], arr1 = [4,5]; arr.concat(arr1) // [1,2,3,4,5]
.indexOf():Returns the first index of a value.
Ex: let arr = [1,2,3]; arr.indexOf(2); //1
.includes():Checks if an any contains a value
Ex: let arr = [1,2,3]; arr.includes(2); // true
.forEach():Executes a function on each array element.
Ex: let arr = [1,2,3]; arr.forEach((x) => console.log(x)); 
.map():Creates a new array with the results of a function
Ex: let arr = [1,2,3]; arr.map((x) => x* 2); //[2,4,6]
.filter(): Create a new array with elements that pass a test.
Ex: let arr = [1,2,3]; arr.filter((x) => x > 2); // [3 ]
.reduce(): Reduces array to  a single value using a function.
Ex: let arr = [1,2,3]; arr.reduce((a,b) => a + b ); // 6
.find():Returns the first element that passes a test.
Ex: let arr = [1,2,3]; arr.find( x => x > 1 ); //2
.findIndex():Returns the index of the first element that passes a test.
Ex: let arr = [1,2,3]; arr.findIndex( x => x > 1 ); //1 
.sort():Sorts array elements in place
Ex: let arr = [3,2,0]; arr.sort(); // [0,2,3]
.reverse():Reverses the order of array elements.
Ex: let arr = [1,2,3]; arr.reverse(); // [3,2,1]
.join(): Joins array elements into a string.
Ex: let arr = [1,2,3]; arr.join('-') // "1-2-3"
.every(): Checks if all elements pass a test
Ex: let arr = [1,2,3]; arr.every(x => x > 2) // false
.some():Checks if any element passes a test.
Ex: let arr = [1,2,3]; arr.some(x => x > 2) // true
[1,2,3].length;  // 3

[1,2,3].at(2); // 3

Array.fill(ele, start, end)
[1,2,3].fill(10) // [10,10]
[1,2,[3]].flat() // [1,2,3]
[1,2,3].toString() // 1,2,3

Array.slice(start, end);
[1,2,3].slice(1,3) //[2,3]

arry.splice(index, count, e1, e2)
[1,4].splice(1,0,2,3); //[1,2,3,4]

Array.isArray("(1,2,3]"); //false
Array.from("123"); //["1","2","3"]




